import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { useCustomer } from "@/contexts/CustomerContext";
import {
  getUserProfile,
  saveUserProfile,
  getCohort,
  getUserMonthlySpend,
  compareWithCohort,
  type UserProfile,
  type ComparisonResult,
} from "@/lib/benchmarkEngine";
import { TrendingDown, TrendingUp, Minus, Target } from "lucide-react";

export function BenchmarkComparison() {
  const { activeCustomer } = useCustomer();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [showProfileDialog, setShowProfileDialog] = useState(false);
  const [comparison, setComparison] = useState<ComparisonResult[]>([]);
  const [selectedAgeBand, setSelectedAgeBand] = useState<string>("");
  const [selectedCity, setSelectedCity] = useState<string>("");

  useEffect(() => {
    const loadedProfile = getUserProfile();
    if (loadedProfile) {
      setProfile(loadedProfile);
      loadComparison(loadedProfile);
    } else {
      setShowProfileDialog(true);
    }
  }, [activeCustomer.id]);

  const loadComparison = (userProfile: UserProfile) => {
    const cohort = getCohort(userProfile);
    if (!cohort) return;

    const userSpend = getUserMonthlySpend(activeCustomer.txns);
    const results = compareWithCohort(userSpend, cohort);
    setComparison(results);
  };

  const handleSaveProfile = () => {
    if (!selectedAgeBand) return;

    const newProfile: UserProfile = {
      ageBand: selectedAgeBand,
      city: selectedCity || undefined,
    };

    saveUserProfile(newProfile);
    setProfile(newProfile);
    setShowProfileDialog(false);
    loadComparison(newProfile);
  };

  const getCategoryIcon = (category: string) => {
    const icons: Record<string, string> = {
      '–ï–¥–∞': 'üçΩÔ∏è',
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöó',
      '–ü–æ–¥–ø–∏—Å–∫–∏': 'üì±',
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üé≠',
      '–ü–æ–∫—É–ø–∫–∏': 'üõçÔ∏è',
    };
    return icons[category] || 'üìä';
  };

  const getVerdictBadge = (result: ComparisonResult) => {
    if (result.verdict === 'below') {
      return (
        <Badge variant="outline" className="gap-1 bg-emerald-500/10 text-emerald-700 border-emerald-500/30">
          <TrendingDown className="h-3 w-3" />
          –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ {result.deltaPct}%
        </Badge>
      );
    }
    if (result.verdict === 'above') {
      return (
        <Badge variant="outline" className="gap-1 bg-orange-500/10 text-orange-700 border-orange-500/30">
          <TrendingUp className="h-3 w-3" />
          –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ +{result.deltaPct}%
        </Badge>
      );
    }
    return (
      <Badge variant="outline" className="gap-1 bg-blue-500/10 text-blue-700 border-blue-500/30">
        <Minus className="h-3 w-3" />
        –ë–ª–∏–∑–∫–æ –∫ —Å—Ä–µ–¥–Ω–µ–º—É
      </Badge>
    );
  };

  const getProgressPercent = (result: ComparisonResult) => {
    return Math.min((result.userSpend / result.p75) * 100, 100);
  };

  if (!profile) {
    return null;
  }

  const cohort = getCohort(profile);

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card className="p-6 bg-gradient-to-br from-primary/5 to-background border-primary/20">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-foreground mb-2">
              üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            </h2>
            <p className="text-muted-foreground">
              –ì—Ä—É–ø–ø–∞: <span className="font-semibold text-foreground">{profile.ageBand}</span> (–∞–Ω–æ–Ω–∏–º–Ω–æ)
            </p>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowProfileDialog(true)}
          >
            –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
          </Button>
        </div>
      </Card>

      {/* Empty state */}
      {comparison.length === 0 && (
        <Card className="p-12 text-center">
          <Target className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
          <h3 className="text-xl font-semibold mb-2">–î–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç</h3>
          <p className="text-muted-foreground">
            –î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
          </p>
        </Card>
      )}

      {/* Comparison cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {comparison.map((result) => (
          <Card key={result.category} className="p-5 hover:shadow-lg transition-all">
            <div className="flex items-start gap-3 mb-4">
              <span className="text-3xl">{getCategoryIcon(result.category)}</span>
              <div className="flex-1 min-w-0">
                <h3 className="font-semibold text-foreground text-lg mb-1">
                  {result.category}
                </h3>
                {getVerdictBadge(result)}
              </div>
            </div>

            <div className="space-y-3">
              <div className="flex justify-between items-baseline">
                <span className="text-sm text-muted-foreground">–í–∞—à–∏ —Ç—Ä–∞—Ç—ã:</span>
                <span className="text-lg font-bold text-foreground">
                  {result.userSpend.toLocaleString('ru-KZ')} ‚Ç∏
                </span>
              </div>

              <div className="flex justify-between items-baseline">
                <span className="text-sm text-muted-foreground">–°—Ä–µ–¥–Ω–∏–π:</span>
                <span className="text-sm font-medium text-muted-foreground">
                  {result.p50.toLocaleString('ru-KZ')} ‚Ç∏
                </span>
              </div>

              <Progress value={getProgressPercent(result)} className="h-2" />

              {result.verdict === 'above' && (
                <div className="pt-2 border-t border-border/50">
                  <p className="text-xs text-muted-foreground mb-2">
                    üí° –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                  </p>
                  <Button size="sm" variant="outline" className="w-full">
                    –°–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂
                  </Button>
                </div>
              )}

              {result.verdict === 'below' && result.userSpend > 0 && (
                <div className="pt-2 border-t border-border/50">
                  <p className="text-xs text-emerald-700">
                    ‚ú® –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ
                  </p>
                </div>
              )}
            </div>
          </Card>
        ))}
      </div>

      {/* Profile setup dialog */}
      <Dialog open={showProfileDialog} onOpenChange={setShowProfileDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–ü–æ–º–æ–≥–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</DialogTitle>
            <DialogDescription>
              –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. 
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞</label>
              <Select value={selectedAgeBand} onValueChange={setSelectedAgeBand}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="18‚Äì24">18‚Äì24 –≥–æ–¥–∞</SelectItem>
                  <SelectItem value="25‚Äì34">25‚Äì34 –≥–æ–¥–∞</SelectItem>
                  <SelectItem value="35‚Äì44">35‚Äì44 –≥–æ–¥–∞</SelectItem>
                  <SelectItem value="45+">45+ –ª–µ—Ç</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">–ì–æ—Ä–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
              <Select value={selectedCity} onValueChange={setSelectedCity}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Almaty">–ê–ª–º–∞—Ç—ã</SelectItem>
                  <SelectItem value="Astana">–ê—Å—Ç–∞–Ω–∞</SelectItem>
                  <SelectItem value="Shymkent">–®—ã–º–∫–µ–Ω—Ç</SelectItem>
                  <SelectItem value="Other">–î—Ä—É–≥–æ–π</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="flex gap-2">
            <Button
              onClick={handleSaveProfile}
              disabled={!selectedAgeBand}
              className="flex-1"
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
