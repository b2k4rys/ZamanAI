import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { Wallet, Settings } from "lucide-react";
import { useState, useEffect } from "react";
import { goals } from "@/data/mockGoals";
import { SalaryRule, SalaryEvent } from "@/types/salary";
import { useToast } from "@/hooks/use-toast";

interface SalaryInsightProps {
  onContribute?: (goalId: string, amount: number, date: string) => void;
}

export const SalaryInsight = ({ onContribute }: SalaryInsightProps) => {
  const [showSuggestModal, setShowSuggestModal] = useState(false);
  const [showRuleForm, setShowRuleForm] = useState(false);
  const [salaryEvent, setSalaryEvent] = useState<SalaryEvent | null>(null);
  const [selectedGoalId, setSelectedGoalId] = useState(goals[0]?.id || "");
  const [percent, setPercent] = useState(10);
  const [amount, setAmount] = useState(0);
  const { toast } = useToast();

  // Load rule from localStorage
  const [rule, setRule] = useState<SalaryRule>(() => {
    const stored = localStorage.getItem("zaman.salaryRule");
    if (stored) {
      return JSON.parse(stored);
    }
    return { enabled: false, percent: 10, goalId: goals[0]?.id || "" };
  });

  // Save rule to localStorage
  useEffect(() => {
    localStorage.setItem("zaman.salaryRule", JSON.stringify(rule));
  }, [rule]);

  // Calculate suggested amount when modal opens or percent changes
  useEffect(() => {
    if (salaryEvent) {
      const suggestedAmount = Math.round(salaryEvent.amount * percent / 100);
      setAmount(suggestedAmount);
    }
  }, [salaryEvent, percent]);

  const handleSimulateSalary = () => {
    const event: SalaryEvent = {
      amount: 250000,
      date: new Date().toISOString(),
      source: 'salary'
    };
    setSalaryEvent(event);
    setPercent(rule.enabled ? rule.percent : 10);
    setSelectedGoalId(rule.enabled ? rule.goalId : goals[0]?.id || "");
    setShowSuggestModal(true);
  };

  const formatAmount = (amount: number) => {
    return new Intl.NumberFormat("ru-KZ").format(amount);
  };

  const handleConfirm = () => {
    if (!salaryEvent) return;
    
    const goal = goals.find(g => g.id === selectedGoalId);
    if (!goal) return;

    onContribute?.(selectedGoalId, amount, salaryEvent.date);
    
    toast({
      title: "–ë–∞—Ä–∞–∫–∞—Ç —Ä–∞—Å—Ç—ë—Ç!",
      description: `–û—Ç–ª–æ–∂–µ–Ω–æ ${formatAmount(amount)} ‚Ç∏ –Ω–∞ ¬´${goal.title}¬ª`
    });
    
    setShowSuggestModal(false);
  };

  const handleToggleAutosave = (checked: boolean) => {
    setRule(prev => ({ ...prev, enabled: checked }));
  };

  const handleUpdateRule = () => {
    setRule(prev => ({ ...prev, percent, goalId: selectedGoalId }));
    setShowRuleForm(false);
    toast({
      title: "–ü—Ä–∞–≤–∏–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      description: `–ê–≤—Ç–æ—Å–µ–π–≤ ${percent}% –Ω–∞ —Ü–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`
    });
  };

  return (
    <>
      <Card className="p-6 shadow-card">
        <div className="space-y-4">
          <div className="flex items-center gap-3">
            <div className="p-2 rounded-lg bg-primary/10">
              <Wallet className="h-5 w-5 text-primary" />
            </div>
            <h3 className="font-semibold text-foreground">Salary Insight</h3>
          </div>

          <p className="text-sm text-muted-foreground">
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Ü–µ–ª—å.
          </p>

          <Button 
            className="w-full gap-2" 
            onClick={handleSimulateSalary}
            variant="outline"
          >
            <Wallet className="h-4 w-4" />
            –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É
          </Button>

          <div className="flex items-center justify-between pt-2 border-t">
            <Label htmlFor="autosave" className="cursor-pointer text-sm">
              –ê–≤—Ç–æ—Å–µ–π–≤ 10%
            </Label>
            <Switch
              id="autosave"
              checked={rule.enabled}
              onCheckedChange={handleToggleAutosave}
            />
          </div>

          {rule.enabled && (
            <div className="rounded-lg bg-accent p-3 space-y-2">
              <p className="text-xs text-muted-foreground">
                –ê–≤—Ç–æ—Å–µ–π–≤: {rule.percent}% –æ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ ¬´
                {goals.find(g => g.id === rule.goalId)?.title}¬ª
              </p>
              <Button 
                size="sm" 
                variant="ghost" 
                onClick={() => setShowRuleForm(true)}
                className="h-7 text-xs gap-1"
              >
                <Settings className="h-3 w-3" />
                –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ
              </Button>
            </div>
          )}
        </div>
      </Card>

      {/* Suggest Modal */}
      <Dialog open={showSuggestModal} onOpenChange={setShowSuggestModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="text-xl">
              –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ {salaryEvent && formatAmount(salaryEvent.amount)} ‚Ç∏ ‚Äî –∞–ª—å—Ö–∞–º–¥—É–ª–∏–ª–ª—è—Ö!
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              –ù–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ª–æ–∂–∏—Ç—å {percent}% –Ω–∞ –≤–∞—à—É –º–µ—á—Ç—É?
            </p>

            <div className="space-y-2">
              <Label>–¶–µ–ª—å</Label>
              <Select value={selectedGoalId} onValueChange={setSelectedGoalId}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {goals.map(goal => (
                    <SelectItem key={goal.id} value={goal.id}>
                      {goal.title}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚Ç∏)</Label>
              <Input
                type="number"
                value={amount}
                onChange={(e) => {
                  const newAmount = parseFloat(e.target.value) || 0;
                  setAmount(newAmount);
                  if (salaryEvent) {
                    setPercent(Math.round(newAmount / salaryEvent.amount * 100));
                  }
                }}
              />
            </div>

            <div className="space-y-2">
              <Label>% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã: {percent}%</Label>
              <Slider
                value={[percent]}
                onValueChange={([value]) => setPercent(value)}
                min={5}
                max={30}
                step={1}
              />
            </div>

            <div className="rounded-lg bg-accent p-3">
              <p className="text-xs text-accent-foreground">
                üí° <strong>–°–æ–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:</strong> –î–∞–∂–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç –∫ —Ü–µ–ª–∏. 
                –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –≤–∞—à—É –º–µ—á—Ç—É!
              </p>
            </div>

            <div className="flex gap-2">
              <Button onClick={handleConfirm} className="flex-1">
                –ü–æ–ø–æ–ª–Ω–∏—Ç—å
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setShowSuggestModal(false)}
                className="flex-1"
              >
                –ü–æ–∑–∂–µ
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Rule Form Modal */}
      <Dialog open={showRuleForm} onOpenChange={setShowRuleForm}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –∞–≤—Ç–æ—Å–µ–π–≤–∞</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <div className="space-y-2">
              <Label>–¶–µ–ª—å</Label>
              <Select value={selectedGoalId} onValueChange={setSelectedGoalId}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {goals.map(goal => (
                    <SelectItem key={goal.id} value={goal.id}>
                      {goal.title}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π: {percent}%</Label>
              <Slider
                value={[percent]}
                onValueChange={([value]) => setPercent(value)}
                min={5}
                max={30}
                step={1}
              />
            </div>

            <div className="flex gap-2">
              <Button onClick={handleUpdateRule} className="flex-1">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setShowRuleForm(false)}
                className="flex-1"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};
